/**
 * 水印插件示例
 *
 * 展示如何使用中间件管道在导出时添加水印
 * 使用钩子系统在关键时刻插入自定义逻辑
 */

import {
  IMiddlewareService,
  IHookService,
  INotificationService,
  IEventBus,
  HookNames,
} from '../../src/core'

// 常用管道名称
const PipelineNames = {
  NODE_CREATE: 'node:create',
  NODE_UPDATE: 'node:update',
  NODE_DELETE: 'node:delete',
  DATA_SAVE: 'data:save',
  DATA_LOAD: 'data:load',
  EXPORT: 'export',
  IMPORT: 'import',
  RENDER: 'render',
} as const

interface WatermarkConfig {
  text: string
  position: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'center'
  opacity: number
  fontSize: number
  color: string
  enabled: boolean
}

export class WatermarkPlugin {
  private config: WatermarkConfig
  private middlewareService?: IMiddlewareService
  private hookService?: IHookService
  private notificationService?: INotificationService
  private eventBus?: IEventBus

  constructor(config: Partial<WatermarkConfig> = {}) {
    this.config = {
      text: 'Generated by CVBuilder',
      position: 'bottom-right',
      opacity: 0.3,
      fontSize: 12,
      color: '#999999',
      enabled: true,
      ...config,
    }
  }

  /**
   * 激活插件
   */
  public async activate(context: {
    middlewareService: IMiddlewareService
    hookService: IHookService
    notificationService: INotificationService
    eventBus: IEventBus
  }): Promise<void> {
    this.middlewareService = context.middlewareService
    this.hookService = context.hookService
    this.notificationService = context.notificationService
    this.eventBus = context.eventBus

    // 1. 创建导出管道（如果不存在）
    this.setupExportPipeline()

    // 2. 注册中间件
    this.registerMiddleware()

    // 3. 注册钩子
    this.registerHooks()

    // 4. 监听配置变化
    this.setupEventListeners()
  }

  /**
   * 停用插件
   */
  public async deactivate(): Promise<void> {
    // 移除中间件
    this.middlewareService?.unregister(PipelineNames.EXPORT, 'add-watermark')
  }

  /**
   * 设置导出管道
   */
  private setupExportPipeline(): void {
    if (!this.middlewareService) return

    // 确保导出管道存在
    if (!this.middlewareService.getPipeline(PipelineNames.EXPORT)) {
      this.middlewareService.createPipeline(PipelineNames.EXPORT, '导出管道')
    }
  }

  /**
   * 注册中间件
   */
  private registerMiddleware(): void {
    if (!this.middlewareService) return

    // 注册添加水印的中间件
    this.middlewareService.register(PipelineNames.EXPORT, {
      id: 'add-watermark',
      name: '添加水印',
      description: '在导出内容中添加水印',
      priority: 50,
      enabled: this.config.enabled,
      // 条件：仅在启用水印时执行
      condition: async () => {
        return this.config.enabled && !!this.config.text
      },
      handler: async (context, next) => {
        try {
          // 在请求数据中添加水印配置
          const exportData = context.request as any

          if (exportData) {
            // 添加水印元数据
            exportData.watermark = {
              text: this.config.text,
              position: this.config.position,
              style: {
                opacity: this.config.opacity,
                fontSize: `${this.config.fontSize}px`,
                color: this.config.color,
              },
              timestamp: new Date().toISOString(),
            }

            // 如果是HTML导出，直接在内容中注入水印
            if (exportData.format === 'html' && exportData.content) {
              exportData.content = this.injectWatermarkHTML(exportData.content)
            }

            // 如果是PDF导出，添加水印配置供后续处理
            if (exportData.format === 'pdf') {
              exportData.pdfOptions = {
                ...exportData.pdfOptions,
                watermark: this.config,
              }
            }

            // 保存到状态中
            context.setState('watermark-added', true)
            context.setState('watermark-config', this.config)
          }

          // 继续下一个中间件
          await next()
        } catch (error) {
          // 即使失败也继续执行
          await next()
        }
      },
    })

    // 注册日志中间件（可选）
    this.middlewareService.register(PipelineNames.EXPORT, {
      id: 'watermark-logger',
      name: '水印日志',
      priority: 40,
      handler: async (context, next) => {
        const watermarkAdded = context.getState('watermark-added')

        if (watermarkAdded) {
          this.eventBus?.emit('watermark:added', {
            config: this.config,
            timestamp: Date.now(),
          })
        }

        await next()
      },
    })
  }

  /**
   * 注册钩子
   */
  private registerHooks(): void {
    if (!this.hookService) return

    // 导出前钩子：检查水印配置
    this.hookService.register({
      id: 'watermark-pre-export-check',
      name: HookNames.EXPORT_BEFORE,
      type: 'before',
      priority: 60,
      handler: async context => {
        if (!this.config.enabled) {
          return
        }

        // 验证水印配置
        if (!this.config.text || this.config.text.trim() === '') {
          if (!this.notificationService) return

          const proceed = await this.notificationService.confirm({
            title: '水印提醒',
            message: '水印文本为空，是否继续导出？',
            type: 'warning',
          })

          if (!proceed) {
            if (context.cancel) context.cancel()
          } else {
            this.notificationService.info('继续导出')
          }
        }
      },
    })

    // 导出后钩子：显示成功提示
    this.hookService.register({
      id: 'watermark-post-export-notify',
      name: HookNames.EXPORT_AFTER,
      type: 'after',
      priority: 50,
      handler: async () => {
        if (this.config.enabled) {
          this.notificationService?.success('已添加水印并导出成功！', {
            duration: 2000,
          })
        }
      },
    })
  }

  /**
   * 设置事件监听
   */
  private setupEventListeners(): void {
    if (!this.eventBus) return

    // 监听配置更新事件
    this.eventBus.on('watermark:config-updated', (data: any) => {
      this.updateConfig(data.config)
    })

    // 监听导出开始事件
    this.eventBus.on('export:start', () => {})
  }

  /**
   * 更新配置
   */
  public updateConfig(newConfig: Partial<WatermarkConfig>): void {
    this.config = {
      ...this.config,
      ...newConfig,
    }

    // 更新中间件启用状态
    if (this.middlewareService) {
      if (this.config.enabled) {
        this.middlewareService.enable(PipelineNames.EXPORT, 'add-watermark')
      } else {
        this.middlewareService.disable(PipelineNames.EXPORT, 'add-watermark')
      }
    }
  }

  /**
   * 在HTML中注入水印
   */
  private injectWatermarkHTML(htmlContent: string): string {
    const watermarkStyle = this.getWatermarkStyle()
    const watermarkHTML = `
      <div class="watermark" style="${watermarkStyle}">
        ${this.escapeHtml(this.config.text)}
      </div>
    `

    // 在body结束标签前插入水印
    if (htmlContent.includes('</body>')) {
      return htmlContent.replace('</body>', `${watermarkHTML}</body>`)
    }

    // 如果没有body标签，直接追加
    return htmlContent + watermarkHTML
  }

  /**
   * 获取水印样式
   */
  private getWatermarkStyle(): string {
    const positionStyles = this.getPositionStyles()

    return `
      position: fixed;
      ${positionStyles}
      opacity: ${this.config.opacity};
      font-size: ${this.config.fontSize}px;
      color: ${this.config.color};
      pointer-events: none;
      z-index: 9999;
      font-family: Arial, sans-serif;
      white-space: nowrap;
    `
      .replace(/\s+/g, ' ')
      .trim()
  }

  /**
   * 获取位置样式
   */
  private getPositionStyles(): string {
    const padding = '20px'

    switch (this.config.position) {
      case 'top-left':
        return `top: ${padding}; left: ${padding};`
      case 'top-right':
        return `top: ${padding}; right: ${padding};`
      case 'bottom-left':
        return `bottom: ${padding}; left: ${padding};`
      case 'bottom-right':
        return `bottom: ${padding}; right: ${padding};`
      case 'center':
        return `top: 50%; left: 50%; transform: translate(-50%, -50%);`
      default:
        return `bottom: ${padding}; right: ${padding};`
    }
  }

  /**
   * HTML转义
   */
  private escapeHtml(text: string): string {
    const div = document.createElement('div')
    div.textContent = text
    return div.innerHTML
  }

  /**
   * 获取当前配置
   */
  public getConfig(): WatermarkConfig {
    return { ...this.config }
  }
}

/**
 * 使用示例：
 *
 * ```typescript
 * import { WatermarkPlugin } from './examples/plugins/WatermarkPlugin'
 *
 * // 创建插件实例
 * const watermarkPlugin = new WatermarkPlugin({
 *   text: '我的简历',
 *   position: 'bottom-right',
 *   opacity: 0.5,
 *   color: '#0066cc',
 * })
 *
 * // 激活插件
 * await watermarkPlugin.activate({
 *   middlewareService,
 *   hookService,
 *   notificationService,
 *   eventBus,
 * })
 *
 * // 更新配置
 * watermarkPlugin.updateConfig({
 *   text: '新的水印文本',
 *   enabled: true,
 * })
 *
 * // 导出时会自动添加水印
 * await exportService.export({ format: 'pdf' })
 * ```
 */
