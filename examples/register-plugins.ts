/**
 * 示例插件注册
 */

import { IEditorContext } from '../src/core/context/EditorContext'
import { AIAssistantPlugin } from './plugins/AIAssistantPlugin'
import { WatermarkPlugin } from './plugins/WatermarkPlugin'
import { DataValidatorPlugin } from './plugins/DataValidatorPlugin'

export interface IPluginsConfig {
  aiAssistant?: {
    enabled: boolean
    apiKey?: string
    model?: string
  }
  watermark?: {
    enabled: boolean
    text?: string
    position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'center'
    opacity?: number
  }
  dataValidator?: {
    enabled: boolean
  }
}

const defaultPluginsConfig: IPluginsConfig = {
  aiAssistant: {
    enabled: false,
  },
  watermark: {
    enabled: false,
    text: 'Generated by CVBuilder',
    position: 'bottom-right',
    opacity: 0.3,
  },
  dataValidator: {
    enabled: true,
  },
}

export async function registerAllPlugins(context: IEditorContext, config: IPluginsConfig = {}) {
  const finalConfig = {
    ...defaultPluginsConfig,
    ...config,
  }

  const plugins: {
    aiAssistant?: AIAssistantPlugin
    watermark?: WatermarkPlugin
    dataValidator?: DataValidatorPlugin
  } = {}

  console.group('[Plugins] 开始注册插件')

  try {
    if (finalConfig.aiAssistant?.enabled) {
      console.log('  → 注册 AIAssistantPlugin')
      const aiPlugin = new AIAssistantPlugin({
        apiKey: finalConfig.aiAssistant.apiKey || process.env.VITE_OPENAI_API_KEY,
        model: finalConfig.aiAssistant.model || 'gpt-3.5-turbo',
      })

      await aiPlugin.activate({
        extensionService: context.extensionService,
        commandService: context.commandService,
        notificationService: context.notificationService,
        hookService: context.hookService,
        eventBus: context.eventBus,
      })

      plugins.aiAssistant = aiPlugin
      console.log('  ✓ AIAssistantPlugin 已激活')
    }

    if (finalConfig.watermark?.enabled) {
      console.log('  → 注册 WatermarkPlugin')
      const watermarkPlugin = new WatermarkPlugin({
        text: finalConfig.watermark.text || 'Generated by CVBuilder',
        position: finalConfig.watermark.position || 'bottom-right',
        opacity: finalConfig.watermark.opacity || 0.3,
        fontSize: 12,
        color: '#999999',
        enabled: true,
      })

      await watermarkPlugin.activate({
        middlewareService: context.middlewareService,
        hookService: context.hookService,
        notificationService: context.notificationService,
        eventBus: context.eventBus,
      })

      plugins.watermark = watermarkPlugin
      console.log('  ✓ WatermarkPlugin 已激活')
    }

    if (finalConfig.dataValidator?.enabled) {
      console.log('  → 注册 DataValidatorPlugin')
      const validatorPlugin = new DataValidatorPlugin()

      await validatorPlugin.activate({
        hookService: context.hookService,
        validationService: context.validationService,
        notificationService: context.notificationService,
        eventBus: context.eventBus,
      })

      plugins.dataValidator = validatorPlugin
      console.log('  ✓ DataValidatorPlugin 已激活')
    }

    console.log(`✅ [Plugins] 已成功注册 ${Object.keys(plugins).length} 个插件`)
    console.groupEnd()

    return plugins
  } catch (error) {
    console.error('❌ [Plugins] 插件注册失败:', error)
    console.groupEnd()
    throw error
  }
}

export async function unregisterAllPlugins(plugins: Record<string, any>) {
  console.group('[Plugins] 开始卸载插件')

  for (const [name, plugin] of Object.entries(plugins)) {
    if (plugin && typeof plugin.deactivate === 'function') {
      try {
        await plugin.deactivate()
        console.log(`  ✓ ${name} 已卸载`)
      } catch (error) {
        console.error(`  ✗ ${name} 卸载失败:`, error)
      }
    }
  }

  console.log('✅ [Plugins] 所有插件已卸载')
  console.groupEnd()
}
